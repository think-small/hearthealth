// <auto-generated />
using System;
using HeartHealth.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeartHealth.Infrastructure.Migrations
{
    [DbContext(typeof(HeartHealthDbContext))]
    [Migration("20211118175406_AddMeasurementSeedData")]
    partial class AddMeasurementSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HeartHealth.Domain.Entities.History", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("HeartHealth.Domain.Entities.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("HistoryId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            Id = "b04a8862-88e7-4c34-9d23-d170b8b11ea6",
                            Timestamp = new DateTime(2021, 11, 18, 17, 54, 6, 567, DateTimeKind.Utc).AddTicks(8766)
                        },
                        new
                        {
                            Id = "ae2215cd-ccc7-4e5c-9c62-1bc730f35574",
                            Timestamp = new DateTime(2021, 11, 17, 17, 54, 6, 567, DateTimeKind.Utc).AddTicks(8779)
                        },
                        new
                        {
                            Id = "f21e64dc-042d-44e2-abdc-44b40c0b7ac3",
                            Timestamp = new DateTime(2021, 11, 16, 17, 54, 6, 567, DateTimeKind.Utc).AddTicks(8850)
                        });
                });

            modelBuilder.Entity("HeartHealth.Domain.Entities.History", b =>
                {
                    b.OwnsOne("HeartHealth.Domain.ValueObjects.BloodPressure", "AverageBloodPressure", b1 =>
                        {
                            b1.Property<string>("HistoryId")
                                .HasColumnType("varchar(36)");

                            b1.Property<int>("Diastolic")
                                .HasColumnType("int")
                                .HasColumnName("AverageDiastolic");

                            b1.Property<int>("Systolic")
                                .HasColumnType("int")
                                .HasColumnName("AverageSystolic");

                            b1.HasKey("HistoryId");

                            b1.ToTable("Histories");

                            b1.WithOwner()
                                .HasForeignKey("HistoryId");
                        });

                    b.OwnsOne("HeartHealth.Domain.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<string>("HistoryId")
                                .HasColumnType("varchar(36)");

                            b1.Property<DateTime>("End")
                                .HasColumnType("smalldatetime")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("smalldatetime")
                                .HasColumnName("Start");

                            b1.HasKey("HistoryId");

                            b1.ToTable("Histories");

                            b1.WithOwner()
                                .HasForeignKey("HistoryId");
                        });

                    b.Navigation("AverageBloodPressure");

                    b.Navigation("DateRange");
                });

            modelBuilder.Entity("HeartHealth.Domain.Entities.Measurement", b =>
                {
                    b.HasOne("HeartHealth.Domain.Entities.History", null)
                        .WithMany("Measurements")
                        .HasForeignKey("HistoryId");

                    b.OwnsOne("HeartHealth.Domain.ValueObjects.BloodPressure", "BloodPressure", b1 =>
                        {
                            b1.Property<string>("MeasurementId")
                                .HasColumnType("varchar(36)");

                            b1.Property<int>("Diastolic")
                                .HasColumnType("int")
                                .HasColumnName("Diastolic");

                            b1.Property<int>("Systolic")
                                .HasColumnType("int")
                                .HasColumnName("Systolic");

                            b1.HasKey("MeasurementId");

                            b1.ToTable("Measurements");

                            b1.WithOwner()
                                .HasForeignKey("MeasurementId");

                            b1.HasData(
                                new
                                {
                                    MeasurementId = "b04a8862-88e7-4c34-9d23-d170b8b11ea6",
                                    Diastolic = 80,
                                    Systolic = 120
                                },
                                new
                                {
                                    MeasurementId = "ae2215cd-ccc7-4e5c-9c62-1bc730f35574",
                                    Diastolic = 77,
                                    Systolic = 112
                                },
                                new
                                {
                                    MeasurementId = "f21e64dc-042d-44e2-abdc-44b40c0b7ac3",
                                    Diastolic = 81,
                                    Systolic = 118
                                });
                        });

                    b.Navigation("BloodPressure")
                        .IsRequired();
                });

            modelBuilder.Entity("HeartHealth.Domain.Entities.History", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
